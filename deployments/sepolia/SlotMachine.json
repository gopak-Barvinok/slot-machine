{
  "address": "0xE5fEAAF2F0f6DC17D1c0034eb9bb85Cfb4d29EE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2Interface",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "win",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnings",
          "type": "uint256"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_amount",
          "type": "uint32"
        }
      ],
      "name": "setCallbackGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusGame",
      "outputs": [
        {
          "internalType": "enum SlotMachine.Game",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStatusGame",
      "outputs": [
        {
          "internalType": "enum SlotMachine.Game",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e38d49ef187b810bfe2988ce193403c22ed8238f5b24b3fea114e8f3b6e7201",
  "receipt": {
    "to": null,
    "from": "0xea1E0fE33A9E61DC20Ab16047D7613EE181D73e3",
    "contractAddress": "0xE5fEAAF2F0f6DC17D1c0034eb9bb85Cfb4d29EE1",
    "transactionIndex": 11,
    "gasUsed": "1941305",
    "logsBloom": "0x
    "blockHash": "0xd4f4a596a3d4d839419c93ae0377d847b21d81b66c3d928fa8662eeec0d5939c",
    "transactionHash": "0x0e38d49ef187b810bfe2988ce193403c22ed8238f5b24b3fea114e8f3b6e7201",
    "logs": [],
    "blockNumber": 4609157,
    "cumulativeGasUsed": "3456942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    6558,
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    2500000,
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    500
  ],
  "numDeployments": 1,
  "solcInputHash": "81b80e7266c882d24809e99e0ee7f776",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2Interface\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"win\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusGame\",\"outputs\":[{\"internalType\":\"enum SlotMachine.Game\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStatusGame\",\"outputs\":[{\"internalType\":\"enum SlotMachine.Game\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SlotMachine.sol\":\"SlotMachine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/SlotMachine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\ncontract SlotMachine is VRFConsumerBaseV2, ConfirmedOwner {\\n\\n    event GameOver(bool win, uint256 winnings);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    enum Game {\\n        START,\\n        CALCULATING,\\n        STOP\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled;\\n        bool exists;\\n        uint256 randomWord;\\n    }\\n\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    mapping(address => uint256) public users;\\n    mapping(address => Game) public userStatusGame;\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    bytes32 keyHash;\\n\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n    uint256 public totalAmount;\\n    uint256 public minimumDeposit;\\n    \\n    uint64 s_subscriptionId;\\n\\n    uint32 callbackGasLimit;\\n\\n    uint16 requestConfirmations = 3;\\n    uint16 numWords = 1;\\n\\n    Game public statusGame;\\n\\n    constructor(\\n        uint64 _subscriptionId,\\n        address _vrfCoordinatorV2Interface,\\n        uint32 _callbackGasLimit,\\n        bytes32 _keyHash,\\n        uint256 _minimumDeposit\\n    ) \\n    VRFConsumerBaseV2(_vrfCoordinatorV2Interface)\\n    ConfirmedOwner(msg.sender) {\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinatorV2Interface);\\n        s_subscriptionId = _subscriptionId;\\n        callbackGasLimit = _callbackGasLimit;\\n        keyHash = _keyHash;\\n        minimumDeposit = _minimumDeposit;\\n    }\\n\\n    modifier checkLiquidity() {\\n        require(address(this).balance >= minimumDeposit * 30, \\\"not enough liquidity\\\");\\n        _;\\n    }\\n\\n    function inputDeposit() external payable checkLiquidity {\\n        require(msg.value >= minimumDeposit, \\\"not enough deposit\\\");\\n        users[msg.sender] = msg.value;\\n        totalAmount += msg.value;\\n        userStatusGame[msg.sender] = Game.START;\\n    }\\n\\n    function setMinimumDeposit(uint256 _min) external onlyOwner {\\n        minimumDeposit = _min;\\n    }\\n\\n    function setCallbackGasLimit(uint32 _amount) public onlyOwner {\\n        callbackGasLimit = _amount;\\n    }\\n\\n    function calculatePrize(uint256 _rand) private view returns(bool successs, uint256 prize) {\\n        require(userStatusGame[msg.sender] == Game.CALCULATING, \\\"User not in game\\\");\\n        if(\\n            _rand % 5 == 0\\n            &&\\n            _rand % 5 == 0\\n            &&\\n            _rand % 5 == 0\\n        ) {\\n            return (true, users[msg.sender] * 30);\\n        } else if (\\n            _rand % 6 == 0\\n            &&\\n            _rand % 5 == 0\\n            &&\\n            _rand % 6 == 0\\n        ) {\\n            return (true, users[msg.sender] * 20);\\n        } else if (\\n            _rand % 4 == 0\\n            &&\\n            _rand % 4 == 0\\n            &&\\n            _rand % 4 == 0\\n        ) {\\n            return (true, users[msg.sender] * 10);\\n        } else if (\\n            _rand % 3 == 0\\n            &&\\n            _rand % 3 == 0\\n            &&\\n            _rand % 3 == 0\\n        ) {\\n            return (true, users[msg.sender] * 5);\\n        } else if (\\n            _rand % 2 == 0\\n            &&\\n            _rand % 2 == 0\\n            &&\\n            _rand % 2 == 0\\n        ) {\\n\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function requestRandomWords() public checkLiquidity returns(uint256 requestId) {\\n        require(userStatusGame[msg.sender] == Game.START, \\\"User not in game\\\");\\n        userStatusGame[msg.sender] = Game.CALCULATING;\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        s_requests[requestId] = RequestStatus({\\n            randomWord: uint256(0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n   function fulfillRandomWords(\\n        uint256 _randomWord,\\n        uint256[] memory\\n    ) internal override {\\n        userStatusGame[msg.sender] = Game.STOP;\\n       (bool successs, uint256 prize) = calculatePrize(_randomWord);\\n        if(successs) {\\n            (bool success, ) = msg.sender.call{value: prize}(\\\"\\\"); \\n            require(success, \\\"Failed to send Ether\\\");\\n        }\\n        delete users[msg.sender];\\n        emit GameOver(successs, prize);\\n\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns(bool fulfilled, uint256 randomWord) {\\n        require(userStatusGame[msg.sender] == Game.CALCULATING, \\\"User not in game\\\");\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return(request.fulfilled, request.randomWord);       \\n    }\\n\\n    receive() external payable {\\n\\n    }\\n}\\n\",\"keccak256\":\"0xaae80bebf778c0707ecd64fae5efabd5c979d07b957b399d459e45eacb42b603\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c8063a168fa8911610095578063d8a4676f11610064578063d8a4676f14610323578063e0c8628914610361578063e78ec42e1461038c578063f2fde38b146103b5578063fc2a88c3146103de57610109565b8063a168fa8914610274578063a4eb718c146102b3578063a87430ba146102dc578063d5ba67c21461031957610109565b806379ba5097116100d157806379ba5097146101ca578063847dd8b8146101e15780638796ba8c1461020c5780638da5cb5b1461024957610109565b80631a39d8ef1461010e5780631fe543e31461013957806332d073ae14610162578063636bfbab1461019f57610109565b3661010957005b600080fd5b34801561011a57600080fd5b50610123610409565b60405161013091906114e7565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b919061169b565b61040f565b005b34801561016e57600080fd5b5061018960048036038101906101849190611755565b6104cf565b60405161019691906117f9565b60405180910390f35b3480156101ab57600080fd5b506101b46104ef565b6040516101c191906114e7565b60405180910390f35b3480156101d657600080fd5b506101df6104f5565b005b3480156101ed57600080fd5b506101f661068a565b60405161020391906117f9565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e9190611814565b61069d565b60405161024091906114e7565b60405180910390f35b34801561025557600080fd5b5061025e6106c1565b60405161026b9190611850565b60405180910390f35b34801561028057600080fd5b5061029b60048036038101906102969190611814565b6106ea565b6040516102aa93929190611886565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d591906118f9565b61072e565b005b3480156102e857600080fd5b5061030360048036038101906102fe9190611755565b61075a565b60405161031091906114e7565b60405180910390f35b610321610772565b005b34801561032f57600080fd5b5061034a60048036038101906103459190611814565b6108cf565b604051610358929190611926565b60405180910390f35b34801561036d57600080fd5b50610376610a5e565b60405161038391906114e7565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae9190611814565b610dbc565b005b3480156103c157600080fd5b506103dc60048036038101906103d79190611755565b610dce565b005b3480156103ea57600080fd5b506103f3610de2565b60405161040091906114e7565b60405180910390f35b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104b892919061194f565b60405180910390fd5b6104cb8282610de8565b5050565b60046020528060005260406000206000915054906101000a900460ff1681565b600a5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c906119d5565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600b60109054906101000a900460ff1681565b600781815481106106ad57600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b610736610f96565b80600b60086101000a81548163ffffffff021916908363ffffffff16021790555050565b60036020528060005260406000206000915090505481565b601e600a546107819190611a24565b4710156107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90611ab2565b60405180910390fd5b600a54341015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90611b1e565b60405180910390fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550346009600082825461085e9190611b3e565b925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156108c8576108c7611782565b5b0217905550565b600080600160028111156108e6576108e5611782565b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561094557610944611782565b5b14610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c90611bbe565b60405180910390fd5b6002600084815260200190815260200160002060000160019054906101000a900460ff166109e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109df90611c2a565b60405180910390fd5b6000600260008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050806000015181604001519250925050915091565b6000601e600a54610a6f9190611a24565b471015610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa890611ab2565b60405180910390fd5b60006002811115610ac557610ac4611782565b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166002811115610b2457610b23611782565b5b14610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b90611bbe565b60405180910390fd5b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610bc757610bc6611782565b5b0217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600654600b60009054906101000a900467ffffffffffffffff16600b600c9054906101000a900461ffff16600b60089054906101000a900463ffffffff16600b600e9054906101000a900461ffff166040518663ffffffff1660e01b8152600401610c79959493929190611ced565b6020604051808303816000875af1158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190611d55565b9050604051806060016040528060001515815260200160011515815260200160008152506002600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101559050506007819080600181540180825580915050600190039060005260206000200160009091909190915055806008819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee81600b600e9054906101000a900461ffff16604051610db1929190611d82565b60405180910390a190565b610dc4610f96565b80600a8190555050565b610dd6610f96565b610ddf81611026565b50565b60085481565b6002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610e4b57610e4a611782565b5b0217905550600080610e5c84611152565b915091508115610f145760003373ffffffffffffffffffffffffffffffffffffffff1682604051610e8c90611ddc565b60006040518083038185875af1925050503d8060008114610ec9576040519150601f19603f3d011682016040523d82523d6000602084013e610ece565b606091505b5050905080610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990611e3d565b60405180910390fd5b505b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557f9b5487475bde7625b8afc98461266782b24bc9d396f6fec9fb5a8010231818e78282604051610f88929190611926565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90611ea9565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90611f15565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6000806001600281111561116957611168611782565b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156111c8576111c7611782565b5b14611208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ff90611bbe565b60405180910390fd5b60006005846112179190611f64565b1480156112305750600060058461122e9190611f64565b145b8015611248575060006005846112469190611f64565b145b156112a4576001601e600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461129b9190611a24565b915091506114c9565b60006006846112b39190611f64565b1480156112cc575060006005846112ca9190611f64565b145b80156112e4575060006006846112e29190611f64565b145b156113405760016014600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113379190611a24565b915091506114c9565b600060048461134f9190611f64565b148015611368575060006004846113669190611f64565b145b80156113805750600060048461137e9190611f64565b145b156113dc576001600a600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113d39190611a24565b915091506114c9565b60006003846113eb9190611f64565b148015611404575060006003846114029190611f64565b145b801561141c5750600060038461141a9190611f64565b145b156114785760016005600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146f9190611a24565b915091506114c9565b60006002846114879190611f64565b1480156114a05750600060028461149e9190611f64565b145b80156114b8575060006002846114b69190611f64565b145b6114c857600080915091506114c9565b5b915091565b6000819050919050565b6114e1816114ce565b82525050565b60006020820190506114fc60008301846114d8565b92915050565b6000604051905090565b600080fd5b600080fd5b61151f816114ce565b811461152a57600080fd5b50565b60008135905061153c81611516565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61159082611547565b810181811067ffffffffffffffff821117156115af576115ae611558565b5b80604052505050565b60006115c2611502565b90506115ce8282611587565b919050565b600067ffffffffffffffff8211156115ee576115ed611558565b5b602082029050602081019050919050565b600080fd5b6000611617611612846115d3565b6115b8565b9050808382526020820190506020840283018581111561163a576116396115ff565b5b835b81811015611663578061164f888261152d565b84526020840193505060208101905061163c565b5050509392505050565b600082601f83011261168257611681611542565b5b8135611692848260208601611604565b91505092915050565b600080604083850312156116b2576116b161150c565b5b60006116c08582860161152d565b925050602083013567ffffffffffffffff8111156116e1576116e0611511565b5b6116ed8582860161166d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611722826116f7565b9050919050565b61173281611717565b811461173d57600080fd5b50565b60008135905061174f81611729565b92915050565b60006020828403121561176b5761176a61150c565b5b600061177984828501611740565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106117c2576117c1611782565b5b50565b60008190506117d3826117b1565b919050565b60006117e3826117c5565b9050919050565b6117f3816117d8565b82525050565b600060208201905061180e60008301846117ea565b92915050565b60006020828403121561182a5761182961150c565b5b60006118388482850161152d565b91505092915050565b61184a81611717565b82525050565b60006020820190506118656000830184611841565b92915050565b60008115159050919050565b6118808161186b565b82525050565b600060608201905061189b6000830186611877565b6118a86020830185611877565b6118b560408301846114d8565b949350505050565b600063ffffffff82169050919050565b6118d6816118bd565b81146118e157600080fd5b50565b6000813590506118f3816118cd565b92915050565b60006020828403121561190f5761190e61150c565b5b600061191d848285016118e4565b91505092915050565b600060408201905061193b6000830185611877565b61194860208301846114d8565b9392505050565b60006040820190506119646000830185611841565b6119716020830184611841565b9392505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006119bf601683611978565b91506119ca82611989565b602082019050919050565b600060208201905081810360008301526119ee816119b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a2f826114ce565b9150611a3a836114ce565b9250828202611a48816114ce565b91508282048414831517611a5f57611a5e6119f5565b5b5092915050565b7f6e6f7420656e6f756768206c6971756964697479000000000000000000000000600082015250565b6000611a9c601483611978565b9150611aa782611a66565b602082019050919050565b60006020820190508181036000830152611acb81611a8f565b9050919050565b7f6e6f7420656e6f756768206465706f7369740000000000000000000000000000600082015250565b6000611b08601283611978565b9150611b1382611ad2565b602082019050919050565b60006020820190508181036000830152611b3781611afb565b9050919050565b6000611b49826114ce565b9150611b54836114ce565b9250828201905080821115611b6c57611b6b6119f5565b5b92915050565b7f55736572206e6f7420696e2067616d6500000000000000000000000000000000600082015250565b6000611ba8601083611978565b9150611bb382611b72565b602082019050919050565b60006020820190508181036000830152611bd781611b9b565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000611c14601183611978565b9150611c1f82611bde565b602082019050919050565b60006020820190508181036000830152611c4381611c07565b9050919050565b6000819050919050565b611c5d81611c4a565b82525050565b600067ffffffffffffffff82169050919050565b611c8081611c63565b82525050565b600061ffff82169050919050565b611c9d81611c86565b82525050565b611cac816118bd565b82525050565b6000819050919050565b6000611cd7611cd2611ccd84611c86565b611cb2565b6118bd565b9050919050565b611ce781611cbc565b82525050565b600060a082019050611d026000830188611c54565b611d0f6020830187611c77565b611d1c6040830186611c94565b611d296060830185611ca3565b611d366080830184611cde565b9695505050505050565b600081519050611d4f81611516565b92915050565b600060208284031215611d6b57611d6a61150c565b5b6000611d7984828501611d40565b91505092915050565b6000604082019050611d9760008301856114d8565b611da46020830184611cde565b9392505050565b600081905092915050565b50565b6000611dc6600083611dab565b9150611dd182611db6565b600082019050919050565b6000611de782611db9565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611e27601483611978565b9150611e3282611df1565b602082019050919050565b60006020820190508181036000830152611e5681611e1a565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000611e93601683611978565b9150611e9e82611e5d565b602082019050919050565b60006020820190508181036000830152611ec281611e86565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000611eff601783611978565b9150611f0a82611ec9565b602082019050919050565b60006020820190508181036000830152611f2e81611ef2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f6f826114ce565b9150611f7a836114ce565b925082611f8a57611f89611f35565b5b82820690509291505056fea2646970667358221220afcf1c2679a6af41a327a66950eeebcb916b8b95374a92316aed1f9bd4eef41364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 125,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 395,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "s_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)390_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 404,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "userStatusGame",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_enum(Game)383)"
      },
      {
        "astId": 407,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(VRFCoordinatorV2Interface)95"
      },
      {
        "astId": 409,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 412,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "requestIds",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 414,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 416,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "totalAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 418,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "minimumDeposit",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 420,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 422,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "callbackGasLimit",
        "offset": 8,
        "slot": "11",
        "type": "t_uint32"
      },
      {
        "astId": 425,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "requestConfirmations",
        "offset": 12,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 428,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "numWords",
        "offset": 14,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 431,
        "contract": "contracts/SlotMachine.sol:SlotMachine",
        "label": "statusGame",
        "offset": 16,
        "slot": "11",
        "type": "t_enum(Game)383"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)95": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(Game)383": {
        "encoding": "inplace",
        "label": "enum SlotMachine.Game",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(Game)383)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum SlotMachine.Game)",
        "numberOfBytes": "32",
        "value": "t_enum(Game)383"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)390_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SlotMachine.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)390_storage"
      },
      "t_struct(RequestStatus)390_storage": {
        "encoding": "inplace",
        "label": "struct SlotMachine.RequestStatus",
        "members": [
          {
            "astId": 385,
            "contract": "contracts/SlotMachine.sol:SlotMachine",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 387,
            "contract": "contracts/SlotMachine.sol:SlotMachine",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 389,
            "contract": "contracts/SlotMachine.sol:SlotMachine",
            "label": "randomWord",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}